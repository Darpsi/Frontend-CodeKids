import codekids_logo from "../assets/images/codekids_logo_n.png";
import intro_video from "../assets/videos/vid_intro_codekids.mp4"
import control from "../assets/images/levels/game_control.jpg"
import program from "../assets/images/levels/program.png"
import puzzle from "../assets/images/levels/puzzle.jpg"
import detective from "../assets/images/levels/detective.avif"
import chef from "../assets/images/levels/chef.avif"
import paths from "../assets/images/levels/paths.webp"
import compuzzle from "../assets/images/levels/compuzzle.webp"
import path from "../assets/images/levels/path.webp"
import music from "../assets/images/levels/music.jpg"
import kitchen from "../assets/images/levels/kitchen.jpg"
import backpack from "../assets/images/levels/backpack.avif"
import box_var from "../assets/images/levels/box_var.webp"

// imagenes modulo2
import variable from "../assets/images/levels/level2/var.png"
import var_change from "../assets/images/levels/level2/var_change.png"
import var_name from "../assets/images/levels/level2/var_name.png"
import var_rules from "../assets/images/levels/level2/var_rules.png"
import math_ops from "../assets/images/levels/level2/math_ops.png"
import var_dynamic from "../assets/images/levels/level2/var_dynamic.png"
import var_concat from "../assets/images/levels/level2/var_concat.png"
import order_ops from "../assets/images/levels/level2/order_ops.png"
import modulo from "../assets/images/levels/level2/modulo.png"
import compare_ops from "../assets/images/levels/level2/compare_ops.png"
import bool_compare from "../assets/images/levels/level2/bool_compare.png"
import comment_code from "../assets/images/levels/level2/comment_code.png"
import hints from "../assets/images/levels/level2/hints.png"
import disable_line from "../assets/images/levels/level2/disable_line.png"

// imagenes modulo3
import robot from "../assets/images/levels/level3/robot.png"
import semaforo from "../assets/images/levels/level3/semaforos.jpg"
import game_logic from "../assets/images/levels/level3/game_logic.jpg"
import control_flujo_if from "../assets/images/levels/level3/control_flujo_if.png"
import control_flujo_else from "../assets/images/levels/level3/control_flujo_else.png"
import if_else from "../assets/images/levels/level3/if_else.png"
import rain from "../assets/images/levels/level3/rain.png"
import test from "../assets/images/levels/level3/test.png"
import ciclo_for from "../assets/images/levels/level3/ciclo_for.png"
import ciclo_while from "../assets/images/levels/level3/ciclo_while.png"
import ciclo_while_contador from "../assets/images/levels/level3/ciclo_while_contador.png"
import control_ciclo_for from "../assets/images/levels/level3/control_ciclo_for.png"
import operadores from "../assets/images/levels/level3/operadores.jpg"
import operadores_logicos from "../assets/images/levels/level3/operadores_logicos.png"
import game_lock from "../assets/images/levels/level3/game_lock.png"

// Imagenes modulo4
import funcion_magica from "../assets/images/levels/level4/funcion_magica.png"
import funcion_saludo from "../assets/images/levels/level4/funcion_saludo.png"
import funcion_reutilizable from "../assets/images/levels/level4/funcion_reutilizable.png"
import variable_local from "../assets/images/levels/level4/variable_local.png"
import variable_global from "../assets/images/levels/level4/variable_global.png"
import factorial_recursivo from "../assets/images/levels/level4/factorial_recursivo.png"
import recursion_error from "../assets/images/levels/level4/recursion_error.png"
import lambda_lista from "../assets/images/levels/level4/lambda_lista.png"
import lambda_atajo from "../assets/images/levels/level4/lambda_atajo.png"

// Imagenes modulo5
import lista_uso from "../assets/images/levels/level5/lista_uso.png"
import lista_bucle from "../assets/images/levels/level5/lista_bucle.png"
import diccionario_uso from "../assets/images/levels/level5/diccionario_uso.png"
import diccionario_mod from "../assets/images/levels/level5/diccionario_mod.png"
import archivo_lectura from "../assets/images/levels/level5/archivo_lectura.png"
import validacion_datos from "../assets/images/levels/level5/validacion_datos.png"
import metodos_listas from "../assets/images/levels/level5/metodos_listas.png"
import buscar_datos from "../assets/images/levels/level5/buscar_datos.png"

// Imagenes modulo7
import clase_ejemplo from "../assets/images/levels/level7/clase_ejemplo.png"
import clase_plano from "../assets/images/levels/level7/clase_plano.png"
import clase_organizada from "../assets/images/levels/level7/clase_organizada.png"
import objeto_vivo from "../assets/images/levels/level7/objeto_vivo.png"
import constructor_codigo from "../assets/images/levels/level7/constructor_codigo.png"
import objeto_constructor from "../assets/images/levels/level7/objeto_constructor.png"
import metodo_accion from "../assets/images/levels/level7/metodo_accion.png"
import atributo_metodo from "../assets/images/levels/level7/atributo_metodo.png"
import objeto_creacion from "../assets/images/levels/level7/objeto_creacion.png"
import objeto_mundo_real from "../assets/images/levels/level7/objeto_mundo_real.png"
import constructor_util from "../assets/images/levels/level7/constructor_util.png"
import objetos_funciones from "../assets/images/levels/level7/objetos_funciones.png"

// Imagenes modulo 8
import herencia_uso from "../assets/images/levels/level8/herencia_uso.png"
import herencia_clase from "../assets/images/levels/level8/herencia_clase.png"
import herencia_sobrescritura from "../assets/images/levels/level8/herencia_sobrescritura.png"
import encapsulamiento_beneficio from "../assets/images/levels/level8/encapsulamiento_beneficio.png"
import encapsulamiento_getter_setter from "../assets/images/levels/level8/encapsulamiento_getter_setter.png"
import encapsulamiento_privado from "../assets/images/levels/level8/encapsulamiento_privado.png"
import composicion_partes from "../assets/images/levels/level8/composicion_partes.png"
import composicion_ejemplo from "../assets/images/levels/level8/composicion_ejemplo.png"
import composicion_beneficio from "../assets/images/levels/level8/composicion_beneficio.png"
import polimorfismo_flexibilidad from "../assets/images/levels/level8/polimorfismo_flexibilidad.png"
import polimorfismo_animales from "../assets/images/levels/level8/polimorfismo_animales.png"
import polimorfismo_uso from "../assets/images/levels/level8/polimorfismo_uso.png"

// Imagenes modulo6
import error_icon_class from "../assets/images/levels/level6/error_icon_class.jpg"
import name_error from "../assets/images/levels/level6/name_error.png"
import zero_division from "../assets/images/levels/level6/zero_division.png"
import syntax_error from "../assets/images/levels/level6/syntax_error.png"
import checklist from "../assets/images/levels/level6/checklist.png"
import debug_magnifier from "../assets/images/levels/level6/debug_magnifier.jpg"
import print_debug from "../assets/images/levels/level6/print_debug.png"
import debug_example from "../assets/images/levels/level6/debug_example.png"
import experiment from "../assets/images/levels/level6/experiment.png"
import try_except_example from "../assets/images/levels/level6/try_except_example.png"
import detour from "../assets/images/levels/level6/detour.png"
import multi_except from "../assets/images/levels/level6/multi_except.png"
import raise_error from "../assets/images/levels/level6/raise_error.png"
import warning_sign from "../assets/images/levels/level6/warning_sign.png"
import custom_try_except from "../assets/images/levels/level6/custom_try_except.png"

export const levelsData = {
  1: {
    ruta: "/modules/1",
    niveles: {
      1: [
        {
          text: "üëã ¬°Hola, peque√±o programador! Bienvenido a Codekids, un lugar donde aprender√°s a programar desde cero mientras te diviertes. \n \n ¬øAlguna vez te has preguntado c√≥mo se crean los videojuegos, las apps o diferentes programas? ¬°Aqu√≠ lo descubrir√°s paso a paso! ü§ñüíª"

        },
        {
          text: "üß≠ Este curso est√° dividido en m√≥dulos. Cada m√≥dulo trata un tema especial de la programaci√≥n.\n \n Dentro de cada m√≥dulo hay niveles, t√≥malo como misiones que ir√°s completando.\n Adem√°s, cada nivel tiene varias secciones, donde aprender√°s con explicaciones sencillas, im√°genes, videos... ¬°y hasta minijuegos! üéÆ‚ú®",
          imagen: program
        },
        {
          text: "üìö En cada secci√≥n encontrar√°s explicaciones que te dir√°n lo que necesitas saber.\n \n Ver√°s tambi√©n im√°genes que te ayudar√°n a imaginar lo que est√°s aprendiendo üñºÔ∏è e incluso videos para ver ejemplos y explicaciones en acci√≥n üé•.\n¬°As√≠ aprender es mucho m√°s divertido!",
          imagen: codekids_logo
        },
        {
          text: "üé≤ Como se mencion√≥ antes, algunos niveles son especiales porque contienen minijuegos dise√±ados para ayudarte a practicar lo que has aprendido.\n \nSon s√∫per divertidos y te har√°n comprender m√°s lo que est√°s aprendiendo, \njusto como un verdadero programador üß†üéâ.\n¬°Vamos a jugarlos todos!",
          imagen: control
        },
        {
          text: "üöÄ El objetivo de Codekids es que desarrolles habilidades como la l√≥gica, la creatividad y la resoluci√≥n de problemas, que te servir√°n no solo en programaci√≥n, ¬°sino en la vida!\n\nQueremos que aprendas mientras te diviertes y descubres todo lo que puedes lograr ü¶∏‚Äç‚ôÄÔ∏èü¶∏‚Äç‚ôÇÔ∏è\n\n¬°Prep√°rate para una aventura incre√≠ble!",
          video: intro_video
        }
      ],
      2: [
        {
          text: "üß© La l√≥gica es como un rompecabezas. Cada pieza tiene su lugar y, cuando las juntas, ¬°todo cobra sentido! \n \n En programaci√≥n, la l√≥gica nos ayuda a resolver problemas y a crear cosas geniales. \n \n ¬°Vamos a aprender a pensar como programadores!",
          imagen: puzzle
        },
        {
          text: "üîç Imagina que eres un detective resolviendo un misterio. Necesitas seguir pistas y hacerte preguntas para encontrar la soluci√≥n. \n \n La l√≥gica es como ese detective en tu mente. Te ayuda a analizar situaciones y encontrar respuestas lupaüîé‚Äãüïµüèª‚Äç‚ôÇÔ∏è‚Äã",
          imagen: detective
        },
        {
          text: "üí° Tambi√©n puedes imaginar la l√≥gica como una receta de cocina üßëüèª‚Äçüç≥‚Äãüë®üèª‚Äçüç≥‚Äã  \n \n Debes primero pensar bien lo que vas a hacer y que tenga sentido, que sepan bien entre s√≠ los ingredientes que vas a usar üçΩÔ∏è As√≠ funciona la l√≥gica en programaci√≥n.",
          imagen: chef
        },
        {
          text: "üß† Ella te ayuda a tomar decisiones. Imagina que est√°s jugando un videojuego y tienes que elegir entre dos caminos. \n \n La l√≥gica te dice cu√°l es el mejor camino para ganar el juego üó∫Ô∏è \n Dependiendo la situaci√≥n tomar√°s una decisi√≥n.",
          imagen: paths
        },
      ],
      3: [
        {
          text: "üî¢ La secuencia es como una lista de pasos que debes seguir para hacer algo. \n \n Imagina que est√°s armando un rompecabezas, tienes que seguir ciertos pasos y cierto razonamiento para al final completarlo todo. üß©\n \n En programaci√≥n, seguimos secuencias para que las computadoras entiendan lo que queremos hacer.",
          imagen: compuzzle
        },
        {
          text: "üõ§Ô∏è Piensa en la secuencia como un camino. Si sigues el camino correcto, llegar√°s a tu destino. \n \n Pero si te sales del camino, ¬°podr√≠as perderte! üö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏è\n \n En programaci√≥n, seguir la secuencia correcta es clave para que todo funcione bien.",
          imagen: path
        },
        {
          text: "üìú La secuencia es como una receta de cocinaüë®üèª‚Äçüç≥ Tienes que seguir los pasos en el orden correcto para que el platillo salga delicioso. üçΩÔ∏è\n \n Si cambias el orden de los pasos, ¬°podr√≠as terminar con un desastre!",
          imagen: kitchen
        },
        {
          text: "üéµ Piensa en el instrumento que te gusta, piensa en una canci√≥n. Tienes que tocar las notas en el orden correcto para que suene bien. \n \n Si tocas las notas en desorden, ¬°no sonar√° igual! üé∂\n \n En programaci√≥n, seguir la secuencia correcta es esencial para crear algo genialüòé‚Äã",
          imagen: music
        },
      ],
      4: [
        {
          text: "üì¶ ¬øSab√≠as que en programaci√≥n usamos diferentes tipos de datos para que la computadora entienda lo que queremos? \n\nEs como tener diferentes cajas para guardar distintas cosas: en una guardas n√∫meros üßÆ, en otra palabras o frases üìù y en otra respuestas de s√≠ o no ‚úÖ‚ùå verdadero o falso. \n\n ¬°A eso le llamamos tipos de datos!",

        },
        {
          text: "üî¢ Los n√∫meros que llamaremos 'enteros' sirven para contar, sumar, \n restar y muchas cosas m√°s. \n Ejemplo: 5, 100, -2.\n\nüó£Ô∏è Los textos que llamamos 'strings' son todo lo que escribimos con letras, como nombres o mensajes y van entre comillas. \n(incluso los n√∫meros ser√°n vistos como strings si est√°n entre comillas ü§Ø). \n Ejemplo: \"Hola\", \"Codekids\", \"5\".\n\nü§î Los booleanos son las respuestas de s√≠ o no. \n En programaci√≥n se dicen como: `true` (verdadero) o `false` (falso).",
          video: "https://www.youtube.com/embed/kZfuJvkdcHU?si=RNNJNNntm0QyIek9",
        },
        {
          text: "üéí Ahora, imagina que tienes una mochila m√°gica donde puedes guardar lo que quieras. Esa mochila es como una variable en programaci√≥n.\n\nPuedes guardar los datos que vimos anteriormente, como un n√∫mero, un texto o una respuesta en ella. Y cuando la necesites, \n ¬°puedes abrir la mochila y usar lo que guardaste!üéí‚ú®",
          imagen: backpack
        },
        {
          text: "‚úçÔ∏è Cuando le decimos a la computadora que guarde algo en una variable, usamos algo llamado asignaci√≥n, es l√≥gico, pues se le asigna un valor. \n\nEs como ponerle una etiqueta a tu mochila: `edad = 10` üìõ, o `nombre = \"Luc√≠a\"` üßç‚Äç‚ôÄÔ∏è. As√≠ la compu sabe qu√© hay dentro.\n\n¬°Y lo mejor! Puedes cambiar el valor que tenga cuando quieras.",
          imagen: box_var,
        },
      ],
    }
  },

  2: {
    ruta: "/modules/2",
    niveles: {
      1: [
        {
          text: "üéí Las variables son como mochilas m√°gicas donde puedes guardar cosas. \n\nPuedes guardar n√∫meros, palabras, respuestas... ¬°lo que quieras! As√≠, cuando necesites esa informaci√≥n, la puedes sacar de tu mochila."
        },
        {
          text: "‚úçÔ∏è Para crear una variable en Python, solo necesitas un nombre seguido del signo  =  y un valor. \n \nPor ejemplo si quieres definir unas variables con nombre, edad y ciudad de recidencia podrias hacer algo asi:  ",
          imagen: variable,
        },
        {
          text: "üìõ Imagina que le pones una etiqueta a tu mochila para saber qu√© hay dentro. Esa etiqueta es el nombre de la variable. \n\nPuedes tener muchas variables diferentes:\n Pero recuerda ponerles nombres descriptivos  ¬°As√≠ sabr√°s qu√© guardaste en cada una! \n \n Por ejemplo si defines variables con nombres con una sola letra como n o m, sera dificil entender que contienen para eso se definen las variables con nombres m√°s descriptivos.",
          imagen: var_name
        },
        {
          text: "üîÑ Lo m√°s genial es que puedes cambiar lo que hay dentro de tu variable. Es como sacar lo que ten√≠as y meter algo nuevo.\n\n En la imagen podemos observar como en un primer momento definimos las variables con ciertos valores y despues volvemos a definir la misma variable pero con un valor diferente, asi podemos actualizar su valor.",
          imagen: var_change
        },
        {
          text: "üìê Cuando creas una variable, debes seguir algunas reglas:\n\n- El nombre no puede comenzar con un n√∫mero.\n- No puede tener espacios, en vez de eso usa _guiones_bajos_, si necesitas separar palabras.\n- No uses s√≠mbolos especiales (como @, $, %, etc.).\n\nEjemplos v√°lidos: \n",
          imagen: var_rules
        },
        {
          text: "üé≠ En Python, las variables son flexibles. ¬°Pueden cambiar el tipo de dato que guardan!\n\nPrimero puedes guardar un n√∫mero y luego un texto, en la misma variable. Python entiende lo que est√°s guardando. ¬°Es como una mochila que se adapta!",
          imagen: var_dynamic
        },
        {
          text: "üß™ A veces, puedes usar el valor de una variable para crear otra. En este caso, la variable mensaje us√≥ nombre para crear una frase nueva. ¬°Muy √∫til! \n \n En este ejemplo usamos el + para unir el Hola con el nombre. \n El resultado final sera: Hola Alexis ",
          imagen: var_concat
        }
      ],
      2: [
        {
          text: "üß† Las computadoras pueden hacer matem√°ticas s√∫per r√°pido. Para eso usamos *operadores matem√°ticos*, como sumar ‚ûï, restar ‚ûñ, multiplicar ‚úñÔ∏è y dividir ‚ûó."
        },
        {
          text: "üí° Primero definimos las variables y les asignamos una operaci√≥n como suma o resta y la variable almacenara su soluci√≥n, Aqu√≠ tienes algunos ejemplos:\n¬°As√≠ puedes hacer c√°lculos en tu programa!",
          imagen: math_ops
        },
        {
          text: "üìè Tambi√©n podemos usar los operadores para hacer cosas m√°s complejas: \n\nPrimero suma o resta y luego multiplica. ¬°Como una calculadora!",
          imagen: order_ops
        },
        {
          text: "üéØ ¬øY qu√© pasa si queremos saber el resto de una divisi√≥n?\nUsamos el operador % llamado m√≥dulo. \n Eso nos dice cu√°nto sobra despu√©s de dividir.",
          imagen: modulo
        }
      ],
      3: [
        {
          text: "ü§î A veces en programaci√≥n queremos hacer preguntas, como:\n\n¬øUn n√∫mero es mayor que otro? ¬øSon iguales? Para eso usamos los *operadores de comparaci√≥n*."
        },
        {
          text: "üîç Estos operadores nos son muy utiles para validar si una variable es menor, mayor, igual o diferente a otra y asi poder tomar una desicion en base a eso.\n\n Algunos operadores son:",
          imagen: compare_ops
        },
        {
          text: "üí° ¬°El print nos permite ver en la terminal el valor que retorna la operaci√≥n. \n La compu responde con `True` (s√≠) o `False` (no)! \n\n En este ejemplo se puede observar que x = 5 por ende cumple son ser mayor a 3 pero no cumple con ser igual a 10.",
          imagen: bool_compare
        }
      ],
      4: [
        {
          text: "üí¨ A veces los programadores escriben notas en su c√≥digo para recordar lo que est√°n haciendo. \n\nEsas notas se llaman *comentarios*, ¬°y la computadora las ignora!"
        },
        {
          text: "üñäÔ∏è En Python, los comentarios empiezan con el s√≠mbolo `#`, son una guia muy util para comprender el objetivo de la variable, ya sea algo simple como almacenar un nombre o cosas mas complejas, cuando ya tengas mucho mas fragmentos de c√≥digo puedas leer los comentarios y entender completamente la finalidad de cada variable:",
          imagen: comment_code
        },
        {
          text: "üß† Los comentarios son s√∫per √∫tiles para que t√∫ (o alguien m√°s) entienda tu c√≥digo despu√©s de un tiempo.\n\n¬°Como dejar pistas para no perderte!",
          imagen: hints
        },
        {
          text: "üîé A veces tambi√©n se usan para desactivar partes del c√≥digo sin borrarlas: \n\nLa l√≠nea est√° 'apagada', pero sigue ah√≠.",
          imagen: disable_line
        }
      ]
    }
  },
  3: {
    ruta: "/modules/3",
    niveles: {
      1: [ // Control de flujo
        {
          text: "üß† Imagina que eres un robot que sigue instrucciones. Pero‚Ä¶ ¬øqu√© pasa si te dan varias opciones? \n\nEl *control de flujo* te ayuda a decidir qu√© camino tomar seg√∫n lo que pasa. ¬°Como elegir entre pizza o hamburguesa! üçïüçî",
          imagen: robot
        },
        {
          text: "üö¶ El control de flujo es como un sem√°foro. Si est√° verde, pasas. Si est√° rojo, te detienes. \n\nLos programas usan instrucciones parecidas para tomar decisiones seg√∫n ciertas condiciones.",
          imagen: semaforo
        },
        {
          text: "üìã Usamos estas decisiones para decirle a la computadora: \"Si pasa esto, haz esto otro\". As√≠ se comporta de diferentes maneras dependiendo de lo que ocurra. ¬°Como un videojuego que cambia de nivel si ganas! üéÆ‚ú®",
          imagen: game_logic
        },
        {
          text: "Para realiza un control de flujo en Python usamos la palabra reservada `if` (si) para decirle a la computadora que haga algo si se cumple una condici√≥n. \n\nPor ejemplo: Si tengo hambre, voy a comer. \n\n Algo asi se veria en Python:",
          imagen: control_flujo_if
        },
        {
          text: "üîÑ Si quieres que haga algo diferente si no se cumple la condici√≥n, usas `else` (sino). \n\nPor ejemplo: Si tengo hambre voy a comer, en caso contrario no lo hare. \n\n¬°As√≠ puedes controlar lo que pasa en tu programa! üéÆ",
          imagen: control_flujo_else
        }
      ],
      2: [ // Condiciones y estructuras if-else
        {
          text: "üîç La estructura `if-else` es como decirle a la computadora:\n\n‚úÖ *Si* pasa algo, haz esto\n‚ùå *Si no*, haz otra cosa.\n\n¬°Como si mam√° dijera: \"Si haces la tarea, puedes jugar. Si no, te toca estudiar m√°s!\" üòÖ",
          imagen: if_else
        },
        {
          text: "üå¶Ô∏è Otro ejemplo:\n\n Si esta lloviendo debo salir con paraguas en caso de que no este lloviendo puedo salir sin el. \n\nEs como decidir qu√© hacer seg√∫n el clima. ‚òÇÔ∏è‚òÄÔ∏è",
          imagen: rain
        },
        {
          text: "üß™ Esto permite que el programa *reaccione* a lo que pasa, como un cient√≠fico haciendo pruebas. Si el experimento da un resultado, se hace algo. Si da otro, se hace otra cosa. üî¨",
          imagen: test
        }
      ],
      3: [ // Bucles
        {
          text: "üîÅ Los bucles sirven para repetir cosas muchas veces sin escribirlas una por una.\n\nImagina que tienes que decir \"Hola\" 10 veces. En vez de escribirlo 10 veces, puedes usar un *bucle* para que lo haga por ti autom√°ticamente. üòé",
        },
        {
          text: "üöÇ El bucle `for` es como un tren que pasa por cada estaci√≥n. En cada parada hace algo. Y cuando llega al final‚Ä¶ ¬°se detiene! üõ§Ô∏è \n\n Por ejemplo: `for i in range(10):` El va a pasar por cada elemento i en el rango de 0 a 9. \n\n significa que el tren va a parar 10 veces y en cada parada har√° algo. \n\n",
          imagen: ciclo_for
        },
        {
          text: "Podemos usar el bucle for con condiciones para que si se cumple una condici√≥n haga algo diferente. \n\nEn este caso el bucle for va a recorrer los n√∫meros del 1 al 10 y si el n√∫mero es igual a 5 lo va a atrapar. \n\n¬°As√≠ puedes hacer tu programa mucho mas completo.! ü¶æ",
          imagen: control_ciclo_for
        },
        {
          text: "üîÑ El bucle `while` sigue repitiendo mientras algo sea verdadero. Es como decir: *Mientras tenga hambre, seguir√© comiendo* üçΩÔ∏è",
          imagen: ciclo_while
        },
        {
          text: "üîÅ En este ejemplo, el bucle `while` sigue sumando hasta que la suma sea mayor que 10. \n\n¬°As√≠ puedes hacer que tu programa repita cosas sin cansarse! ü¶æ",
          imagen: ciclo_while_contador
        }
      ],
      4: [ // Operadores l√≥gicos
        {
          text: "üß© Los *operadores l√≥gicos* permiten combinar condiciones. Son como piezas de rompecabezas que juntas para tomar decisiones m√°s complejas. \n\nUsamos: `AND`, `OR`, `NOT`. ü§Ø",
          imagen: operadores
        },
        {
          text: "üëâ `AND` (y): solo es verdadero si **ambas** cosas son verdaderas.\nüëâ `OR` (o): es verdadero si **una** de las cosas lo es.\nüëâ `NOT` (no): cambia lo verdadero a falso, y lo falso a verdadero.",
          imagen: operadores_logicos
        },
        {
          text: "üéÆ En un juego podr√≠as decir:\n\n` Si tengo la llave y encontre la puerta, entonces puedo entrar a la sala`\n\nSolo puedes entrar si *ambas* condiciones se cumplen.",
          imagen: game_lock
        }
      ]
    }
  },
  4: {
    ruta: "/modules/4",
    niveles: {
      1: [ // Funciones
        {
          text: "üõ†Ô∏è Las *funciones* son como cajas m√°gicas que hacen una tarea por ti. Les das algo (entrada), hacen algo adentro, y te devuelven un resultado (salida).",
          imagen: funcion_magica
        },
        {
          text: "üì¶ Por ejemplo, una funci√≥n para saludar podr√≠a recibir un nombre y devolver un saludo: `def saludar(nombre): return 'Hola ' + nombre`",
          imagen: funcion_saludo
        },
        {
          text: "üîÅ Puedes usar la misma funci√≥n muchas veces sin tener que escribir el mismo c√≥digo una y otra vez. ¬°Es como tener un robot que siempre hace lo mismo por ti! ü§ñ",
          imagen: funcion_reutilizable
        }
      ],
      2: [ // √Åmbito de variables
        {
          text: "üîí El *√°mbito* de una variable es el lugar del c√≥digo donde puede usarse. Algunas solo viven dentro de una funci√≥n y otras viven en todo el programa.",
        },
        {
          text: "üëÄ Una variable *local* solo existe dentro de la funci√≥n donde se cre√≥. Afuera, nadie la conoce.",
          imagen: variable_local
        },
        {
          text: "üåé Una variable *global* existe fuera de las funciones y puede usarse en muchas partes del programa. ¬°Pero hay que tener cuidado al usarla! ‚ö†Ô∏è",
          imagen: variable_global
        }
      ],
      3: [ // Funciones recursivas
        {
          text: "‚ôªÔ∏è Una *funci√≥n recursiva* es una funci√≥n que se llama a s√≠ misma. Es √∫til cuando algo se repite en partes m√°s peque√±as.",
        },
        {
          text: "üßÆ Ejemplo cl√°sico: el factorial de un n√∫mero.\n`def factorial(n): return 1 if n==0 else n * factorial(n-1)`",
          imagen: factorial_recursivo
        },
        {
          text: "üìâ Pero cuidado: si no hay una condici√≥n para detener la repetici√≥n, ¬°la funci√≥n nunca termina y el programa se traba!",
          imagen: recursion_error
        }
      ],
      4: [ // Funciones an√≥nimas
        {
          text: "üôä Una *funci√≥n an√≥nima* es una funci√≥n sin nombre. En Python se escribe con la palabra `lambda`. Es √∫til para cosas r√°pidas o simples.",
        },
        {
          text: "‚ö° Por ejemplo: `lambda x: x * 2` es una funci√≥n que recibe un n√∫mero y lo duplica. Se puede usar en listas u otras funciones.",
          imagen: lambda_lista
        },
        {
          text: "üéØ Usamos funciones lambda para escribir menos c√≥digo cuando no necesitamos una funci√≥n completa. Son como atajos. üõ£Ô∏è",
          imagen: lambda_atajo
        }
      ]
    }
  },
  5: {
    ruta: "/modules/5",
    niveles: {
      1: [ // Listas y arreglos
        {
          text: "üìö Una *lista* es como una fila de casillas donde puedes guardar muchos datos. Puedes recorrerla, ordenarla y modificarla.",
        },
        {
          text: "üì¶ Por ejemplo: `nombres = ['Ana', 'Luis', 'Pedro']` te guarda varios nombres en una sola variable.",
          imagen: lista_uso
        },
        {
          text: "üîÅ Puedes usar un bucle `for` para recorrer la lista y hacer algo con cada elemento. ¬°Es muy √∫til! üöÄ",
          imagen: lista_bucle
        }
      ],
      2: [ // Diccionarios y mapas
        {
          text: "üóÇÔ∏è Un *diccionario* guarda informaci√≥n en forma de *clave: valor*. Como una libreta de contactos donde cada nombre tiene un n√∫mero.",
        },
        {
          text: "üóùÔ∏è Por ejemplo: `contactos = {'Ana': 123, 'Luis': 456}`. Para ver el n√∫mero de Ana, usas `contactos['Ana']`",
          imagen: diccionario_uso
        },
        {
          text: "üîß Puedes a√±adir, cambiar o eliminar valores en un diccionario. Es ideal para organizar informaci√≥n. üß†",
          imagen: diccionario_mod
        }
      ],
      3: [ // Lectura de datos
        {
          text: "üì• Los programas pueden leer datos que t√∫ escribas con el teclado usando `input()`. As√≠ pueden reaccionar a lo que digas. üßë‚Äçüíª",
        },
        {
          text: "üóÇÔ∏è Tambi√©n pueden leer informaci√≥n guardada en archivos. Como cuando abres una receta o un cuento en la compu. üìñ",
          imagen: archivo_lectura
        },
        {
          text: "‚úÖ Es importante validar los datos que llegan para asegurarse de que tengan sentido antes de usarlos. ¬°Evita errores! üõ°Ô∏è",
          imagen: validacion_datos
        }
      ],
      4: [ // Manipulaci√≥n de datos
        {
          text: "üõ†Ô∏è *Manipular datos* significa cambiarlos, ordenarlos o filtrarlos. ¬°As√≠ los programas entienden mejor la informaci√≥n! üßÆ",
        },
        {
          text: "üßπ Puedes usar m√©todos como `.append()`, `.sort()`, o `filter()` para trabajar con listas. Es como limpiar y ordenar tus juguetes. üß∏",
          imagen: metodos_listas
        },
        {
          text: "üîç Tambi√©n puedes buscar datos dentro de listas y diccionarios con bucles o condiciones.",
          imagen: buscar_datos
        }
      ]
    }
  },
  7: {
    ruta: "/modules/7",
    niveles: {
      1: [ // ¬øQu√© es una clase?
        {
          text: "üèóÔ∏è Una *clase* es como un plano o receta. Define c√≥mo ser√°n los objetos y qu√© pueden hacer. üìê",
        },
        {
          text: "üì¶ Por ejemplo: `class Perro:` define c√≥mo ser√°n todos los perros que creemos. Para definir una clase usamos la palabra reservada `class` y el nombre de la clase.",
          imagen: clase_ejemplo
        },
        {
          text: "üß© Dentro de una clase se pueden definir caracter√≠sticas (atributos) y acciones (m√©todos) los cuales son funciones dentro de clases.",
          imagen: clase_plano
        },
        {
          text: "üîç Con clases podemos organizar y planear mejor nuestro c√≥digo, ¬°como arquitectos de programas! üè¢, \n por ejemplo aqui creamos una clase llamada Coche que tiene el metodo arrancar.",
          imagen: clase_organizada
        }
      ],
      2: [ // Constructores
        {
          text: "üèóÔ∏è Un *constructor* es una funci√≥n especial llamada `__init__` que se ejecuta cuando creas un objeto. üéì",
        },
        {
          text: "üî® Por ejemplo: `def __init__(self, nombre):` permite darle un nombre al objeto al crearlo.",
          imagen: constructor_codigo
        },
        {
          text: "üì¶ As√≠, `persona1 = Persona('pepito')` crea una persona llamada pepito. \n\nEl constructor asegura que el objeto tenga todo lo que necesita desde el principio.",
          imagen: objeto_constructor
        },
        {
          text: "üöÄ Los constructores aseguran que los objetos se creen correctamente con la informaci√≥n que necesitan. üß†",
          imagen: constructor_util
        }
      ],
      3: [ // ¬øQu√© es un objeto?
        {
          text: "üß∏ Un *objeto* es una cosa creada a partir de una clase, como un juguete hecho siguiendo un plano. üéà",
        },
        {
          text: "üì¶ Por ejemplo: Supongamos que ya tenemos una clase Perro, `mi_perro = Perro('Fido', 3)` crea un objeto que representa un perro llamado Fido y su edad 3 a√±os.",
          imagen: objeto_creacion
        },
        {
          text: "üî® Cada objeto puede tener sus propios datos y hacer cosas. Son como juguetes √∫nicos. üêï",
          imagen: objetos_funciones
        },
        {
          text: "üåç Los objetos hacen que el c√≥digo sea m√°s f√°cil de entender y m√°s parecido al mundo real.",
          imagen: objeto_mundo_real
        }
      ],
      4: [ // Atributos y m√©todos
        {
          text: "üé® *Atributos* son las caracter√≠sticas de un objeto, como color, tama√±o o edad. üìù",
        },
        {
          text: "üîß *M√©todos* son las acciones que un objeto puede hacer, como correr, saltar o ladrar. üöÄ",
          imagen: metodo_accion
        },
        {
          text: "üì¶ Por ejemplo: `mi_perro.nombre = 'Fido'` y `mi_perro.ladrar()` le dan un nombre y lo hacen ladrar. \n\n En base al ejemplo anterior donde definimos los metodos o funciones en la clase, aqui podemos utilizar esos metodos en nuestros objetos, empleando el objeto seguido de un punto y el nombre del metodo, como por ejemplo `mi_perro.ladrar()`.",
          imagen: atributo_metodo
        },
        {
          text: "üîç Los atributos y m√©todos hacen que los objetos sean completos y √∫tiles. üåü, podemos ver un ejemplo completo de una clase Robot con metodos y atributos.",
          imagen: objeto_vivo
        }
      ]
    }
  },
  8: {
    ruta: "/modules/8",
    niveles: {
      1: [ // Herencia
        {
          text: "üë®‚Äçüëß La *herencia* permite que una clase hija use cosas de una clase padre. ¬°Como heredar habilidades! üß¨"
        },
        {
          text: "üß± Por ejemplo, si tienes una clase `Animal`, puedes crear una clase `Perro` que herede de ella. \n\n As√≠, `Perro` tendr√° todo lo que `Animal` tiene, como atributos y m√©todos. üêæ \n\n En Python, usamos la palabra reservada `class` seguida del nombre de la clase hija y entre par√©ntesis el nombre de la clase padre.",
          imagen: herencia_clase
        },
        {
          text: "üì• La clase hija usa los atributos y m√©todos de la clase padre. ¬°No hay que repetir c√≥digo! ‚ôªÔ∏è",
          imagen: herencia_uso
        },
        {
          text: "üîÑ Tambi√©n puedes agregar o cambiar cosas en la clase hija. Se llama *sobrescritura*.",
          imagen: herencia_sobrescritura
        }
      ],
      2: [ // Encapsulamiento
        {
          text: "üîê El *encapsulamiento* protege los datos dentro de un objeto para que no se cambien por error. üõ°Ô∏è"
        },
        {
          text: "üì¶ Puedes hacer atributos privados usando guiones bajos `_nombre`. As√≠ solo se usan desde adentro.",
          imagen: encapsulamiento_privado
        },
        {
          text: "üß∞ Usamos *getters* y *setters* para acceder o cambiar los datos de forma segura.",
          imagen: encapsulamiento_getter_setter
        },
        {
          text: "‚úÖ Encapsular hace que el c√≥digo sea m√°s claro, seguro y f√°cil de mantener. üßº",
          imagen: encapsulamiento_beneficio
        }
      ],
      3: [ // Polimorfismo
        {
          text: "üåÄ El *polimorfismo* permite que diferentes objetos respondan distinto al mismo mensaje. ¬°Como magia! ‚ú®"
        },
        {
          text: "üê∂üê± Por ejemplo, un `Perro` y un `Gato` pueden tener un m√©todo `hacer_sonido()`, pero cada uno hace algo diferente.",
          imagen: polimorfismo_animales
        },
        {
          text: "üîÅ Esto funciona muy bien cuando usas herencia. ¬°Cada clase puede tener su propia versi√≥n!",
          imagen: polimorfismo_uso
        },
        {
          text: "üß† As√≠ puedes escribir c√≥digo que funciona con muchos tipos de objetos sin preocuparte por cu√°l es cu√°l.",
          imagen: polimorfismo_flexibilidad
        }
      ],
      4: [ // Composici√≥n
        {
          text: "üèóÔ∏è La *composici√≥n* es cuando una clase usa objetos de otras clases como partes internas. üîß"
        },
        {
          text: "üöó Por ejemplo, un `Coche` puede tener un `Motor`, un `Volante` y unas `Ruedas`. No hereda, ¬°los contiene!",
          imagen: composicion_ejemplo
        },
        {
          text: "üîÑ Esto permite crear objetos m√°s complejos a partir de piezas simples y reutilizables.",
          imagen: composicion_partes
        },
        {
          text: "üéØ La composici√≥n ayuda a organizar bien tu programa y evita relaciones confusas.",
          imagen: composicion_beneficio
        }
      ]
    }
  },   
  6: {
    ruta: "/modules/6",
    niveles: {
      1: [ // Errores comunes
        {
          text: "üò± ¬°Oh no! A veces, cuando programamos, la computadora se confunde y aparece un *error*. ¬°Es como tropezar cuando corres! üèÉ‚Äç‚ôÇÔ∏è No te preocupes, vamos a aprender qu√© son los errores comunes y c√≥mo evitarlos. üöß",
          imagen: error_icon_class
        },
        {
          text: "üîç Un error com√∫n es escribir mal el nombre de una variable. Por ejemplo, si defines `edad = 10` pero luego escribes `edadd`, ¬°la compu no lo encuentra! Esto se llama *NameError*. ",
          imagen: name_error
        },
        {
          text: "üìâ Otro error es intentar dividir por cero, como `10 / 0`. ¬°Eso no se puede! Esto causa un *ZeroDivisionError*. Es como querer repartir 10 galletas entre 0 amigos. üç™üö´",
          imagen: zero_division
        },
        {
          text: "‚úçÔ∏è El error m√°s com√∫n dentro de un programa es *SyntaxError* que ocurre si escribes mal el c√≥digo, como olvidar los dos puntos `:` despu√©s de un `if`. ¬°Es como olvidar una coma en una carta! üìú",
          imagen: syntax_error
        },
        {
          text: "üõ°Ô∏è Para evitar estos errores, revisa bien tu c√≥digo, usa nombres claros para las variables y aseg√∫rate de no dividir por cero. ¬°Es como revisar tu mochila antes de salir! üéí",
          imagen: checklist
        }
      ],
      2: [ // Depuraci√≥n b√°sica
        {
          text: "üïµÔ∏è‚Äç‚ôÇÔ∏è *Depurar* es como ser un detective buscando pistas para arreglar tu c√≥digo. Cuando algo no funciona, ¬°tienes que encontrar el error y solucionarlo! üîé",
          imagen: debug_magnifier
        },
        {
          text: "üí° Una forma de depurar es usar `print()` para ver qu√© est√° pasando. Por ejemplo, si tu c√≥digo no da el resultado esperado, imprime las variables para ver sus valores. üñ®Ô∏è",
          imagen: print_debug
        },
        {
          text: "üîß Ejemplo: Si tienes `x = 5` y esperas que sea 10, usa `print(x)` para comprobarlo. Si ves `5`, ¬°sabr√°s d√≥nde est√° el problema! Aqu√≠ va un ejemplo:\n```python\nx = 5\nprint('El valor de x es:', x)  # Imprime: El valor de x es: 5\n```",
          imagen: debug_example
        },
        {
          text: "üéØ Tambi√©n puedes probar tu c√≥digo paso a paso. Cambia una cosa, corre el programa y mira qu√© pasa. ¬°Es como experimentar en un laboratorio! üß™",
          imagen: experiment
        }
      ],
      3: [ // Bloques try-catch
        {
          text: "üõ°Ô∏è Los bloques *try-except* son como un chaleco salvavidas para tu programa. Si algo sale mal, el programa no se detiene, ¬°sino que hace otra cosa! üö§",
        },
        {
          text: "üìù En Python, usamos `try` para intentar algo que podr√≠a fallar y `except` para decir qu√© hacer si hay un error. Por ejemplo:\n```python\ntry:\n    x = 10 / 0  # ¬°Error!\nexcept ZeroDivisionError:\n    print('¬°No puedes dividir por cero!')\n```",
          imagen: try_except_example
        },
        {
          text: "üö¶ Esto es como un sem√°foro: si el camino est√° bloqueado (error), tomas otra ruta (except). As√≠ tu programa sigue funcionando. üõ§Ô∏è",
          imagen: detour
        },
        {
          text: "üåü Puedes usar varios `except` para manejar diferentes errores, como *NameError* o *TypeError*. ¬°Es como tener un plan B para cada problema! üìã",
          imagen: multi_except
        }
      ],
      4: [ // Errores personalizados
        {
          text: "üé® A veces quieres crear tus propios mensajes de error para que tu programa sea m√°s claro. ¬°Es como escribir una nota personalizada! ‚úçÔ∏è",
        },
        {
          text: "üî® En Python, usas `raise` para lanzar un error personalizado. Por ejemplo:\n```python\nedad = 5\nif edad < 10:\n    raise ValueError('¬°Eres muy peque√±o para este juego!')\n```",
          imagen: raise_error
        },
        {
          text: "üó£Ô∏è Esto es √∫til para avisar a otros programadores (o a ti mismo) por qu√© algo sali√≥ mal. ¬°Es como poner una se√±al de advertencia! ‚ö†Ô∏è",
          imagen: warning_sign
        },
        {
          text: "üß© Puedes combinar `raise` con `try-except` para manejar tus errores personalizados. As√≠ controlas exactamente qu√© pasa. Ejemplo:\n```python\ntry:\n    raise ValueError('Algo sali√≥ mal')\nexcept ValueError as e:\n    print(e)  # Imprime: Algo sali√≥ mal\n```",
          imagen: custom_try_except
        }
      ]
    }
  }
};
